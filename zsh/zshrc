# =============================================================================
# Powerlevel10k Instant Prompt
# =============================================================================
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# =============================================================================
# Environment Variables
# =============================================================================
export ZSH="$HOME/.oh-my-zsh"
export XDG_CONFIG_HOME="$HOME/.config"

# Android SDK
export ANDROID_SDK_ROOT=$HOME/Library/Android/sdk
export PATH=$PATH:$ANDROID_SDK_ROOT/emulator
export PATH=$PATH:$ANDROID_SDK_ROOT/platform-tools

# Local bin
export PATH="$HOME/.local/bin:$PATH"

# Load env vars from .env file
[ -f "$HOME/.env" ] && source "$HOME/.env"

# Ruby
export PATH="/opt/homebrew/opt/ruby/bin:$PATH"

# =============================================================================
# Oh My Zsh Configuration
# =============================================================================
ZSH_THEME="powerlevel10k/powerlevel10k"
plugins=(git vi-mode)
source $ZSH/oh-my-zsh.sh

# =============================================================================
# Package Manager Paths
# =============================================================================
# pnpm
export PNPM_HOME="/Users/timo/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac

# fnm
export PATH="/Users/timo/Library/Application Support/fnm:$PATH"
eval "`fnm env`"

# Node global packages
export PATH=~/.npm-global/bin:$PATH

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

# =============================================================================
# CLI Tools
# =============================================================================
# Turso CLI
export PATH="/Users/timo/.turso:$PATH"

# =============================================================================
# Aliases
# =============================================================================
# Shell
alias src="source ~/.zshrc"
alias s="src"
alias c="clear"
alias e="exit"

# Navigation
# alias cd="z"
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias h="cd ~"
alias b="cd -"
alias d="cd ~/Developer"
alias sbf="cd ~/Developer/steuerbot/frontend"
alias sbw="cd ~/Developer/steuerbot/website"

# File Operations
# alias ls="eza"
alias l='ls -l'
alias la='ls -la'
alias lt='ls --tree'
alias lf='la | fzf'
# alias cat="bat"
# alias grep="rg"
alias link="ln -sf"

# Applications
alias vim="nvim"
alias v="vim"
alias lg="lazygit"
alias g="git"
alias r="run_npm_script"
alias t="tmux"
alias ta="tmux attach"
alias ai="codex"
alias y="yazy-shell"
alias i="fastfetch"
alias n='manage_node_version'
alias o='manage_ollama'

# =============================================================================
# Key Bindings
# =============================================================================
bindkey -s ^f "tmux-sessionizer\n"
bindkey '^G' fzf-cd-widget

# =============================================================================
# Functions
# =============================================================================
# run npm script requires jq fzf and nr
run_npm_script() {
  # Check for required dependencies
  local missing_deps=()
  
  if ! command -v jq >/dev/null 2>&1; then
    missing_deps+=("jq")
  fi
  
  if ! command -v fzf >/dev/null 2>&1; then
    missing_deps+=("fzf")
  fi
  
  if ! command -v nr >/dev/null 2>&1; then
    missing_deps+=("nr")
  fi
  
  if [ ${#missing_deps[@]} -ne 0 ]; then
    echo "Error: Missing required dependencies: ${missing_deps[*]}"
    echo "Please install them before running this script."
    return 1
  fi
  
  # Check if package.json exists
  if [ ! -f "package.json" ]; then
    echo "Error: package.json not found in current directory"
    return 1
  fi
  
  # Check if scripts exist in package.json
  local scripts_count
  scripts_count=$(jq -r '.scripts | length' package.json)
  
  if [ "$scripts_count" -eq 0 ]; then
    echo "Error: No scripts found in package.json"
    return 1
  fi
  
  # Run the script selector
  local script
  script=$(jq -r '.scripts | keys[]' package.json | sort | \
        fzf --height 15 \
            --cycle \
            --prompt="Select script to run: " \
            --border-label=" Run npm script ") && \
    if [ -n "$script" ]; then
        local cmd="nr $script"
        print -s "$cmd"  # Add to zsh history
        eval "$cmd"
    fi
}

manage_node_version() {
    # Check if fnm is installed
    if ! command -v fnm >/dev/null 2>&1; then
        echo "fnm is not installed. Please install it first."
        return 1
    fi

    # Check if fzf is installed
    if ! command -v fzf >/dev/null 2>&1; then
        echo "fzf is not installed. Please install it first."
        return 1
    fi

    # Get current Node.js version
    local current_version=$(node --version 2>/dev/null || echo "none")
    local current_version_string="(current: $current_version)"

    # Function to list installed versions
    list_installed() {
        fnm list
    }

    # Function to list remote versions
    list_remote() {
        fnm list-remote
    }

    # Helper function to extract clean version number from fnm list output
    extract_version() {
        sed 's/^\* //'
    }

    # Main menu options
    action=$(echo -e "1. Use installed version\n2. Set default version\n3. Install new version\n4. Uninstall version" | \
        fzf --height 15 \
            --cycle \
            --no-clear \
            --prompt="Select fnm action: " \
            --border-label " Manage Node.js $current_version_string")

    case "$action" in
        "1. Use installed version")
            version=$(list_installed | \
                fzf --height 15 \
                    --cycle \
                    --tac \
                    --prompt="Select version to use: " \
                    --border-label " Manage Node.js $current_version_string" | \
                extract_version)
            if [ ! -z "$version" ]; then
                fnm use "$version"
            fi
            ;;
    
        "2. Set default version")
            version=$(list_installed | \
                fzf --height 15 \
                    --cycle \
                    --tac \
                    --prompt="Select version to set as default: " \
                    --border-label " Set Default Node.js Version $current_version_string" | \
                extract_version)
            if [ ! -z "$version" ]; then
                fnm default "$version"
            fi
            ;;

        "3. Install new version")
            version=$(list_remote | \
                fzf --height 15 \
                    --tac \
                    --prompt="Select version to install: " \
                    --border-label " Install Node.js $current_version_string")
            if [ ! -z "$version" ]; then
                fnm install "$version"
                echo -n "Do you want to set this version as default? (y/N) "
                read answer
                if [[ $answer =~ ^[Yy]$ ]]; then
                    fnm default "$version"
                    fnm use "$version"
                fi
            fi
            ;;

        "4. Uninstall version")
            version=$(list_installed | \
                fzf --height 15 \
                    --cycle \
                    --tac \
                    --prompt="Select version to uninstall: " \
                    --border-label " Uninstall Node.js Version $current_version_string" | \
                extract_version)
            if [ ! -z "$version" ]; then
                echo -n "Are you sure you want to uninstall Node.js $version? (y/N) "
                read answer
                if [[ $answer =~ ^[Yy]$ ]]; then
                    fnm uninstall "$version"
                fi
            fi
            ;;
    esac
}

manage_ollama() {
    # Check if ollama is installed
    if ! command -v ollama >/dev/null 2>&1; then
        echo "ollama is not installed. Please install it first."
        return 1
    fi

    # Check if fzf is installed
    if ! command -v fzf >/dev/null 2>&1; then
        echo "fzf is not installed. Please install it first."
        return 1
    fi

    # Check if ollama service is running
    if ! pgrep -f "ollama serve" >/dev/null; then
        echo "Ollama service is not running. Starting it now..."
        ollama serve >/dev/null 2>&1 &
        # Wait a moment for the service to start
        sleep 2
    fi

    # Function to list installed models
    list_installed() {
        ollama list
    }

    # Helper function to extract model name from ollama list output
    extract_model() {
        awk '{print $1}'
    }

    # Main menu options
    action=$(echo -e "1. Run installed model\n2. Remove model\n3. Stop Ollama service" | \
        fzf --height 15 \
            --cycle \
            --no-clear \
            --prompt="Select ollama action: " \
            --border-label " Manage Ollama ")

    case "$action" in
        "1. Run installed model")
            model=$(list_installed | \
                fzf --height 15 \
                    --cycle \
                    --tac \
                    --prompt="Select model to run: " \
                    --border-label " Run Ollama Model " | \
                extract_model)
            if [ ! -z "$model" ]; then
                ollama run "$model"
            fi
            ;;
    
        "2. Remove model")
            model=$(list_installed | \
                fzf --height 15 \
                    --cycle \
                    --tac \
                    --prompt="Select model to remove: " \
                    --border-label " Remove Ollama Model " | \
                extract_model)
            if [ ! -z "$model" ]; then
                echo -n "Are you sure you want to remove $model? (y/N) "
                read answer
                if [[ $answer =~ ^[Yy]$ ]]; then
                    ollama rm "$model"
                fi
            fi
            ;;

        "3. Stop Ollama service")
            echo -n "Are you sure you want to stop the Ollama service? (y/N) "
            read answer
            if [[ $answer =~ ^[Yy]$ ]]; then
                pkill -f "ollama serve"
                echo "Ollama service stopped."
            fi
            ;;
    esac
}

# =============================================================================
# Brew Package Management Functions
# =============================================================================
# Install (one or multiple) selected application(s)
# using "brew search" as source input
# mnemonic [B]rew [I]nstall [P]ackage
bip() {
  local inst=$(brew search "$@" | \
        fzf -m \
            --height 15 \
            --cycle \
            --prompt="Select packages to install: " \
            --border-label=" Brew Install ")

  if [[ $inst ]]; then
    for prog in $(echo $inst);
    do; brew install $prog; done;
  fi
}

# Update (one or multiple) selected application(s)
# mnemonic [B]rew [U]pdate [P]ackage
bup() {
  local upd=$(brew leaves | \
        fzf -m \
            --height 15 \
            --cycle \
            --prompt="Select packages to update: " \
            --border-label=" Brew Update ")

  if [[ $upd ]]; then
    for prog in $(echo $upd);
    do; brew upgrade $prog; done;
  fi
}

# Delete (one or multiple) selected application(s)
# mnemonic [B]rew [C]lean [P]ackage (e.g. uninstall)
bcp() {
  local uninst=$(brew leaves | \
        fzf -m \
            --height 15 \
            --cycle \
            --prompt="Select packages to remove: " \
            --border-label=" Brew Uninstall ")

  if [[ $uninst ]]; then
    for prog in $(echo $uninst);
    do; brew uninstall $prog; done;
  fi
}

# =============================================================================
# Shell Wrappers
# =============================================================================
# We suggest using this y shell wrapper that provides the ability to change the current working directory when exiting Yazi.
function yazy-shell() {
  local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
  yazi "$@" --cwd-file="$tmp"
  if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
    builtin cd -- "$cwd"
  fi
  rm -f -- "$tmp"
}

# =============================================================================
# FZF Configuration
# =============================================================================
# fzf tokyonight theme and default options
export FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS \
  --highlight-line \
  --info=inline-right \
  --ansi \
  --border
  --color=bg+:#283457 \
  --color=bg:#16161e \
  --color=border:#27a1b9 \
  --color=fg:#c0caf5 \
  --color=gutter:#16161e \
  --color=header:#ff9e64 \
  --color=hl+:#2ac3de \
  --color=hl:#2ac3de \
  --color=info:#545c7e \
  --color=marker:#ff007c \
  --color=pointer:#ff007c \
  --color=prompt:#2ac3de \
  --color=query:#c0caf5:regular \
  --color=scrollbar:#27a1b9 \
  --color=separator:#ff9e64 \
  --color=spinner:#ff007c \
"
# Enable fzf keybindings
source <(fzf --zsh)

# =============================================================================
# Additional Tools
# =============================================================================
eval "$(zoxide init zsh)"

# bun completions
[ -s "/Users/timo/.bun/_bun" ] && source "/Users/timo/.bun/_bun"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
