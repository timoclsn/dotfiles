#!/bin/bash

DIFF=$(git diff --cached)

if [ -z "$DIFF" ]; then
    echo "No staged changes found"
    exit 1
fi

# Get recent commit messages to help AI understand the project's commit style
echo "Fetching recent commits for style analysis..."
RECENT_COMMITS=$(git log -n 5 --pretty=format:"%s" 2>/dev/null)

# Create a prompt that includes recent commits and the diff
PROMPT="You are a senior software developer.

Here are the 5 most recent commit messages in this repository:

<recent-commits>
$RECENT_COMMITS
</recent-commits>

Here are the currently staged changes:

<diff>
$DIFF
</diff>

Generate a commit message for the staged changes. the commit message should match the project's commit style from the recent commits. Only respond with the commit message text, nothing else!."

# Try to generate commit message with codex in quiet JSON mode to avoid interactive UI hangs
#   --json:     stream responses as JSON lines for easy parsing
#   -q:         non-interactive/CI friendly mode so codex exits after replying
#   -p/-m:      ensure we hit the expected provider/model (falls back to config defaults if absent)

echo "Generating AI commit message..."

COMMIT_MSG=$(codex -q --json -p OpenAI -m gpt-4.1-mini "$PROMPT" 2>/dev/null | \
  jq -r 'select(.type=="message" and .role=="assistant") | .content[0].text' | \
  head -n 1)

# Fallback if codex fails or returns empty
if [ -z "$COMMIT_MSG" ] || [ "$COMMIT_MSG" = "null" ]; then
    echo "AI failed to generate a message, using default..."
    COMMIT_MSG="Update files"
fi

echo "$COMMIT_MSG" > .git/COMMIT_EDITMSG

# Open editor directly (will work in lazygit with output: terminal)
${EDITOR:-vim} .git/COMMIT_EDITMSG

# Check if file is non-empty and commit using it
if [ -s .git/COMMIT_EDITMSG ]; then
    git commit -F .git/COMMIT_EDITMSG
else
    echo "Commit message is empty, commit aborted."
    exit 1
fi
